<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: embedded | 42]]></title>
  <link href="http://sudharsh.me/blog/categories/embedded/atom.xml" rel="self"/>
  <link href="http://sudharsh.me/"/>
  <updated>2014-08-18T22:09:19+05:30</updated>
  <id>http://sudharsh.me/</id>
  <author>
    <name><![CDATA[Sudharshan S]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mashing Twitter and FSO]]></title>
    <link href="http://sudharsh.me/blog/2009/12/06/mashing-twitter-and-fso/"/>
    <updated>2009-12-06T14:27:00+05:30</updated>
    <id>http://sudharsh.me/blog/2009/12/06/mashing-twitter-and-fso</id>
    <content type="html"><![CDATA[<p>I really love Twitter and it didn&rsquo;t make any sense to me to shell out a rupee for every tweet sent through my Airtel Mobile. Moreover, I am on one of those monthly booster packs which allows you to send 22000 text messages for free. I simply had to exploit this by setting up my own little &lsquo;OC&rsquo; twitter forwarder written in python. (I know of smstweet.in service but I am still charged 1.50 for every tweet I send)</p>

<p>Its insanely simple to write such a &lsquo;forwarder&rsquo; in python using the services provided by the FSO (<a href="http://wiki.freesmartphone.org">freesmartphone.org</a>) Framework,</p>

<ol>
<li><p> Send messages to your old/unused number whose SIM is in the <a href="http://openmoko.com/freerunner.html">Freerunner</a> (or any other device supported by the <a href="http://wiki.freesmartphone.org">FSO</a> framework)</p></li>
<li><p> Handle the incoming messages and use <a href="http://code.google.com/p/python-twitter/">python-twitter</a> API (or) raw urllib2 to post updates. Of course, the device should be connected to the internet, you can <a href="http://wiki.openmoko.org/wiki/Usb_networking">tether</a> this device to an old unused computer. Simply put, the Freerunner should be able to access the internet.</p></li>
</ol>


<p>I know this is dumb given cheap GPRS and all, but what the heck; Sundays <em>are</em> reserved for dumb things and I wanted to show off how easy it is to develop and conjure up simple but powerful scripts using open hackable hardware like the Freerunner. So take off your pedantic hats ;)</p>

<p>Here is the actual python code,</p>

<p>``` python</p>

<h1>!/usr/bin/env python</h1>

<h1>Written By Sudharshan S, <a href="http://sudharsh.wordpress.com">http://sudharsh.wordpress.com</a></h1>

<p>import dbus
import time
import logging
import twitter</p>

<p>import gobject
from gobject import MainLoop</p>

<p>from dbus.mainloop.glib import DBusGMainLoop
DBusGMainLoop (set_as_default = True)</p>

<h1>Use OAUTH?</h1>

<p>USERNAME = &ldquo;username&rdquo;
PASSWORD = &ldquo;password&rdquo;</p>

<p>log = logging.getLogger(&ldquo;TweetForwarder&rdquo;)</p>

<p>class TweetForwarder:</p>

<p>   &ldquo;&rdquo;&ldquo;Process Incoming messages and update twitter status</p>

<pre><code>  if the message startswith 'tweet'
</code></pre>

<p>   &ldquo;&rdquo;"</p>

<p>   def <strong>init</strong>(self, username, password):</p>

<pre><code>   log.warning("Starting up....")
   self.twitter_api = twitter.Api(username=username, password=password)

   # Get proxies and add signal handlers
   bus = dbus.SystemBus()
   _usage = bus.get_object("org.freesmartphone.ousaged",
                           "/org/freesmartphone/Usage")
   _proxy = bus.get_object("org.freesmartphone.ogsmd", \
                           "/org/freesmartphone/GSM/Device")
   self.usage_iface = dbus.Interface(_usage, "org.freesmartphone.Usage")
   self.usage_iface.RequestResource('GSM')
   self.sms_iface = dbus.Interface (_proxy, "org.freesmartphone.GSM.SMS")
   self.sms_iface.connect_to_signal ("IncomingMessage", self.onIncomingMessage)
</code></pre>

<p>   def onIncomingMessage(self, sender, message, kwargs):</p>

<pre><code>   log.warning("Received SMS from %s:%s" % (sender, message))
   # We don't ALL messages to this number to be tweeted
   if message.strip().startswith("tweet "):
       log.warning("Trying to update status : %s" % message[6:].strip())
       self.twitter_api.PostUpdate(message[6:])
       log.warning("Updated Status")
</code></pre>

<p>   def run(self):</p>

<pre><code>   loop = MainLoop()
   loop.run()
</code></pre>

<p>if <strong>name</strong> == &ldquo;<strong>main</strong>&rdquo;:</p>

<pre><code>logging.basicConfig()
server = TweetForwarder(USERNAME, PASSWORD)
server.run()
</code></pre>

<p>```</p>

<p>Make sure you have python-netclient and python-json installed on your Freerunner. These can be installed using the &lsquo;opkg install&rsquo; command.</p>

<p>The script and the accompanying dependency can be downloaded from <a href="http://gitorious.org/dumb-scripts/dumb-scripts/archive-tarball/master">here</a>. Just change the USERNAME and PASSWORD accordingly after scp'ing the tarball to your device.</p>

<p>Some useful links,</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[No GTA03 in 2009 :(]]></title>
    <link href="http://sudharsh.me/blog/2009/04/05/no-gta03-in-2009/"/>
    <updated>2009-04-05T13:56:00+05:30</updated>
    <id>http://sudharsh.me/blog/2009/04/05/no-gta03-in-2009</id>
    <content type="html"><![CDATA[<p>2-3 back came a sad and shocking <a href="http://mobile.slashdot.org/article.pl?sid=09/04/04/228240&amp;art_pos=2">news</a> (atleast to me) that Openmoko has sacked/let go of 50% of its work force and has ceased all developments for GTA03. Furthermore Openmoko has stopped funding FSO. Both of which were grim developments to hear.</p>

<p>On a brighter note, FSO has started work on the Vala/C implemention of the reference Python implementation named <a href="http://git.freesmartphone.org/?p=cornucopia.git;a=summary">cornucopia</a>, which mainly aims at the general defragmentation of all the middleware code out there for handheld devices. Whats more, the first subsystem to be ported to this new codebase will be odeviced, which happened to be my project for the <a href="http://code.google.com/soc/2008/openmoko/appinfo.html?csaid=C4E490026007DA79">Google Summer of Code 2008</a>.</p>

<p>For more, check this recent blog entry by <a href="http://www.vanille-media.de/site/index.php/2009/04/04/back-from-switzerland/">Mickey</a>.</p>

<p>Patches all the way :D&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[fsod status]]></title>
    <link href="http://sudharsh.me/blog/2008/10/20/fsod-status/"/>
    <updated>2008-10-20T17:37:00+05:30</updated>
    <id>http://sudharsh.me/blog/2008/10/20/fsod-status</id>
    <content type="html"><![CDATA[<p>Its been a while since I blogged about odeviced. In my earlier posts I had mentioned the possibility of integrating odeviced and others (which do not exist at the moment) into a single daemon for avoiding too much fracture. I have pushed some code that does this, converting odeviced into a Device subsystem that is loaded by a master daemon called fsod. This, of course is very similar to the python implementation (<a href="http://git.freesmartphone.org/?p=framework.git;a=summary">frameworkd</a>) which is pretty awesome at what it does and has become a sort of success story for using DBus as the fudgy layer separating toolkits and the underlying systems which in themselves are tightly coupled.</p>

<p>The current code base is written in <a href="http://live.gnome.org/Vala">vala</a> (and C where it is required) which unfortunately lacks certain features of <a href="http://dbus.freedesktop.org/">DBus</a> like async callbacks and some method signatures at the moment (I may be horribly wrong. I would be glad if someone points out in that case. The mailing list discussion on async support <a href="http://mail.gnome.org/archives/vala-list/2008-October/msg00057.html">here</a>). But at the same time, writing GObject code in vala is infinitely easier and lots of fun too :D.</p>

<p>It would be also be pretty awesome if fsod could support loading python plugins, kind of like what gedit does. The GSM code especially could benefit from this since there is not much to gain in terms of performance here.</p>

<p>As for fsod, the sources are available <a href="http://git.freesmartphone.org/?p=openmoko-gsoc2008.git;a=summary">here</a>. In case anyone wants to get hold of a opk of the current code to install on the Freerunner, it is available <a href="http://sudharsh.mukt.in/fsod-preview_armv4t.opk">here</a>. Comments are welcome</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[odeviced: Accelerometers, PowerControl, IdleNotifiers and Input plugins]]></title>
    <link href="http://sudharsh.me/blog/2008/08/16/odeviced-accelerometers-powercontrol-idlenotifiers-and-input-plugins/"/>
    <updated>2008-08-16T17:02:00+05:30</updated>
    <id>http://sudharsh.me/blog/2008/08/16/odeviced-accelerometers-powercontrol-idlenotifiers-and-input-plugins</id>
    <content type="html"><![CDATA[<p><img class="center <a" src="href="http://sudharsh.files.wordpress.com/2008/08/screenshot-1.png">http://sudharsh.files.wordpress.com/2008/08/screenshot-1.png</a>"></p>

<p>Phew. GSoC 2008 program is going to end in a couple of days and boy, did I have fun. Most of the code for the second phase was actually pushed last week. Anyway, here are the updates.</p>

<ul>
<li><p>Accelerometer plugin for Freerunner. Now you can use odeviced to retrieve accelerometer values for the position of the device along the x,y,z axes.</p></li>
<li><p>Completed Powercontrol plugin. Kept putting this off, but got myself to complete it today.</p></li>
<li><p>IdleNotifiers enabling apps to keep track of the state of the device viz. IDLE, BUSY&hellip;etc</p></li>
<li><p>Input plugin for signalling input events on DBus. Like button presses, etc. Should make this asynchrounous once vala offers support for async DBus on the server side (&lsquo;read&rsquo; systemcall can block)</p></li>
<li><p>Initial Audio plugin, am keeping this as a TODO outside GSoC.</p></li>
</ul>


<p>The daemon is far from complete and GSoC was meant to be just the beginning to get the basics right. Integration of odeviced as a subsytem of a frameworkd implementation (theres already a python implementation) in C is something I am looking forward to contribute in the next few months. It would be uber cool, if someone lends a helping hand for now to make odeviced work on other devices on which openmoko (and FSO) can run.</p>

<p>I am not sure if people will find this interesting, but still</p>

<ul>
<li><p>The plugins average around 14kB in size, with powercontrol being the biggest of all. (25KB)</p></li>
<li><p>The main odeviced binary is around 26KB, which IMO, is quite teency weency.</p></li>
</ul>


<p>(But given the fact that the code links against GLib and DBus, I have no idea if these numbers mean anything at all. I would be grateful if anyone thinks this is something to cheer about)</p>

<p>P.S: I am looking for a temporary place to host the ipks for the lazy ones, will post the link once I get that. Meanwhile, get the code <a href="http://git.freesmartphone.org/?p=openmoko-gsoc2008.git;a=summary">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Woot..Passed the mid-term evals]]></title>
    <link href="http://sudharsh.me/blog/2008/07/17/wootpassed-the-mid-term-evals/"/>
    <updated>2008-07-17T13:51:00+05:30</updated>
    <id>http://sudharsh.me/blog/2008/07/17/wootpassed-the-mid-term-evals</id>
    <content type="html"><![CDATA[<p>After a week&rsquo;s waiting my mentor informed me that I had passed the mid-term evaluations. (he said that my performance for the first phase exceeded his expectations. :D ).</p>

<p>Its been a long time since I actually blogged about the progress. After I got the Freerunner in my hand (muhuhahahaa), it was more fun since there were subtle changes in the way the code ran on the device. Tracking down segfaults was uber awesome.</p>

<p>Plugins are now written <em>entirely</em> in vala. Earlier, this used to be an ugly abomination of hand-written and vala generated C code. Now, where good ol' C is necessary, .vapis' have been added that wrap around code written in C.</p>

<p>Additionally plugins for rtc, input and led were added. Input plugin is incomplete though. The code isn&rsquo;t perfect yet, so need to refine them and make them a bit tight in some places. rtc and led especially needs some tweaks.</p>

<p>I guess most of the second phase will be spent on syncing with frameworkd. Now, the python device daemons have been integrated into a single daemon with odeviced as one of the subsytems. (Earlier this was separate). The python daemon is uber-cool by itself, but imagine a C implementation of the entire frameworkd. Light on resources and excellent in performance, if done <strong>right</strong>.</p>

<p>Git repository <a href="http://git.freesmartphone.org/?p=openmoko-gsoc2008.git;a=summary">here</a>.</p>
]]></content>
  </entry>
  
</feed>
