<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linux | 42]]></title>
  <link href="http://sudharsh.me/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://sudharsh.me/"/>
  <updated>2014-07-12T21:16:07+05:30</updated>
  <id>http://sudharsh.me/</id>
  <author>
    <name><![CDATA[Sudharshan S]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Save your staplers!]]></title>
    <link href="http://sudharsh.me/blog/2011/02/06/save-your-staplers/"/>
    <updated>2011-02-06T15:45:00+05:30</updated>
    <id>http://sudharsh.me/blog/2011/02/06/save-your-staplers</id>
    <content type="html"><![CDATA[<p>Picture this. You are at work on a Friday evening. You are all pumped up! Who wouldn&rsquo;t be. Two full days of zero work ahead! You shutdown your computer, rise up, turn around to leave and BAM! This happens,</p>

<p><img class="center <a" src="href="http://sudharsh.files.wordpress.com/2011/02/office-space.jpg">http://sudharsh.files.wordpress.com/2011/02/office-space.jpg</a>"></p>

<p>The key to &lsquo;<a href="http://en.wikipedia.org/wiki/Bill_Lumbergh">Lumberg Evasion</a>&rsquo; is not only to stay &lsquo;hidden&rsquo; but also to be aware of your boss' whereabouts. Information is wealth and can potentially save your weekend.</p>

<p>I wanted to check out Pygame and hacked out a little python script which does this. The idea is that you position your webcam (el-cheapo-no-brand webcams sell for peanuts) near your cubicle/desk and get notified if there is some movement in a predefined area. Also works great if you have a laptop and want to know if someone is peeking over your shoulder (yeah, yeah&hellip; I know about mirrors).</p>

<p>The script can detect movements within the red rectangle. Here is how it does this</p>

<ul>
<li><p>When we start the script, the average color within the red rectangle is determined. This will act as the reference color.</p></li>
<li><p>Deviations in this average color is monitored in consecutive frames. If its more than a certain threshold, there is some movement.</p></li>
<li><p>When this happens, play a sound and pop up a little notification</p></li>
</ul>


<p><img class="center <a" src="href="http://sudharsh.files.wordpress.com/2011/02/screenshot-22.png">http://sudharsh.files.wordpress.com/2011/02/screenshot-22.png</a>"></p>

<p><img class="center <a" src="href="http://sudharsh.files.wordpress.com/2011/02/screenshot-21.png">http://sudharsh.files.wordpress.com/2011/02/screenshot-21.png</a>"></p>

<p><img class="center <a" src="href="http://sudharsh.files.wordpress.com/2011/02/screenshot-211.png">http://sudharsh.files.wordpress.com/2011/02/screenshot-211.png</a>"></p>

<p>Of course, it goes without saying that its just a simple hack. Works well if the background color is of an uniform color.</p>

<p>P.S: No, I don&rsquo;t work for an &lsquo;Initech&rsquo;.</p>

<p>P.P.S: If you are one of those &lsquo;Bill Lumberg&rsquo; types, Fuck you!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mashing Twitter and FSO]]></title>
    <link href="http://sudharsh.me/blog/2009/12/06/mashing-twitter-and-fso/"/>
    <updated>2009-12-06T14:27:00+05:30</updated>
    <id>http://sudharsh.me/blog/2009/12/06/mashing-twitter-and-fso</id>
    <content type="html"><![CDATA[<p>I really love Twitter and it didn&rsquo;t make any sense to me to shell out a rupee for every tweet sent through my Airtel Mobile. Moreover, I am on one of those monthly booster packs which allows you to send 22000 text messages for free. I simply had to exploit this by setting up my own little &lsquo;OC&rsquo; twitter forwarder written in python. (I know of smstweet.in service but I am still charged 1.50 for every tweet I send)</p>

<p>Its insanely simple to write such a &lsquo;forwarder&rsquo; in python using the services provided by the FSO (<a href="http://wiki.freesmartphone.org">freesmartphone.org</a>) Framework,</p>

<ol>
<li><p> Send messages to your old/unused number whose SIM is in the <a href="http://openmoko.com/freerunner.html">Freerunner</a> (or any other device supported by the <a href="http://wiki.freesmartphone.org">FSO</a> framework)</p></li>
<li><p> Handle the incoming messages and use <a href="http://code.google.com/p/python-twitter/">python-twitter</a> API (or) raw urllib2 to post updates. Of course, the device should be connected to the internet, you can <a href="http://wiki.openmoko.org/wiki/Usb_networking">tether</a> this device to an old unused computer. Simply put, the Freerunner should be able to access the internet.</p></li>
</ol>


<p>I know this is dumb given cheap GPRS and all, but what the heck; Sundays <em>are</em> reserved for dumb things and I wanted to show off how easy it is to develop and conjure up simple but powerful scripts using open hackable hardware like the Freerunner. So take off your pedantic hats ;)</p>

<p>Here is the actual python code,</p>

<p>``` python</p>

<h1>!/usr/bin/env python</h1>

<h1>Written By Sudharshan S, <a href="http://sudharsh.wordpress.com">http://sudharsh.wordpress.com</a></h1>

<p>import dbus
import time
import logging
import twitter</p>

<p>import gobject
from gobject import MainLoop</p>

<p>from dbus.mainloop.glib import DBusGMainLoop
DBusGMainLoop (set_as_default = True)</p>

<h1>Use OAUTH?</h1>

<p>USERNAME = &ldquo;username&rdquo;
PASSWORD = &ldquo;password&rdquo;</p>

<p>log = logging.getLogger(&ldquo;TweetForwarder&rdquo;)</p>

<p>class TweetForwarder:</p>

<p>   &ldquo;&rdquo;&ldquo;Process Incoming messages and update twitter status</p>

<pre><code>  if the message startswith 'tweet'
</code></pre>

<p>   &ldquo;&rdquo;"</p>

<p>   def <strong>init</strong>(self, username, password):</p>

<pre><code>   log.warning("Starting up....")
   self.twitter_api = twitter.Api(username=username, password=password)

   # Get proxies and add signal handlers
   bus = dbus.SystemBus()
   _usage = bus.get_object("org.freesmartphone.ousaged",
                           "/org/freesmartphone/Usage")
   _proxy = bus.get_object("org.freesmartphone.ogsmd", \
                           "/org/freesmartphone/GSM/Device")
   self.usage_iface = dbus.Interface(_usage, "org.freesmartphone.Usage")
   self.usage_iface.RequestResource('GSM')
   self.sms_iface = dbus.Interface (_proxy, "org.freesmartphone.GSM.SMS")
   self.sms_iface.connect_to_signal ("IncomingMessage", self.onIncomingMessage)
</code></pre>

<p>   def onIncomingMessage(self, sender, message, kwargs):</p>

<pre><code>   log.warning("Received SMS from %s:%s" % (sender, message))
   # We don't ALL messages to this number to be tweeted
   if message.strip().startswith("tweet "):
       log.warning("Trying to update status : %s" % message[6:].strip())
       self.twitter_api.PostUpdate(message[6:])
       log.warning("Updated Status")
</code></pre>

<p>   def run(self):</p>

<pre><code>   loop = MainLoop()
   loop.run()
</code></pre>

<p>if <strong>name</strong> == &ldquo;<strong>main</strong>&rdquo;:</p>

<pre><code>logging.basicConfig()
server = TweetForwarder(USERNAME, PASSWORD)
server.run()
</code></pre>

<p>```</p>

<p>Make sure you have python-netclient and python-json installed on your Freerunner. These can be installed using the &lsquo;opkg install&rsquo; command.</p>

<p>The script and the accompanying dependency can be downloaded from <a href="http://gitorious.org/dumb-scripts/dumb-scripts/archive-tarball/master">here</a>. Just change the USERNAME and PASSWORD accordingly after scp'ing the tarball to your device.</p>

<p>Some useful links,</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Konsole monitoring with twitter and python]]></title>
    <link href="http://sudharsh.me/blog/2009/10/17/konsole-monitoring-with-twitter-and-python/"/>
    <updated>2009-10-17T06:18:00+05:30</updated>
    <id>http://sudharsh.me/blog/2009/10/17/konsole-monitoring-with-twitter-and-python</id>
    <content type="html"><![CDATA[<p>This happens to me all the time, especially when running programs that takes hours to complete.</p>

<ol>
<li><p> Start the code</p></li>
<li><p> Go out for some tea or movie.</p></li>
<li><p> When you come back, you find that the program had decided to piss you off by crashing 2 seconds after you went away from the keyboard.</p></li>
</ol>


<p>The amount of cuss words thrown at the code/program is directly proportional to the silliness of the cause of the crash or error. Even more, if its a typo. Now that twitter allows tweets to be sent to Bharti AirTel (Boohoo others) numbers, and add Python + python-twitter + konsole (Terminal emulator from KDE) to the mix, you can get a very rudimentary notification system which can DM you when konsole activity changes.</p>

<p>To do this, First Enable &lsquo;Monitor for Silence&rsquo; in &lsquo;View&rsquo; Menu</p>

<p>Then  &lsquo;Settings&rsquo; &ndash;> &lsquo;Configure Notifications&rsquo;. In the dialog that pops us, configure the notifications such that it executes a python script. The dialog should look something like this,</p>

<p><a href="http://sudharsh.files.wordpress.com/2009/10/multi_sentiment2.png"><img src="http://sudharsh.files.wordpress.com/2009/10/multi_sentiment2.png?w=247" alt="dialog" /></a></p>

<p>The real deal is in the script. It uses the python-twitter module to send a DM from a dummy account to whatever account you want the notifications to go to.</p>

<p>``` python</p>

<pre><code>#!/usr/bin/env python

import twitter

username = "dummy_account"
password = "password"

receiver = "sup3rkiddo"

def sendDM():
    try:
        api = twitter.Api(username=username, password=password)
        stats = api.PostDirectMessage(receiver, "*Done compiling*")
    except:
        print "Error!"

if __name__ == '__main__':
    sendDM()
</code></pre>

<p>```</p>

<p>Thats it! Simple but useful ;p (Of course, change the message according your needs)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[No GTA03 in 2009 :(]]></title>
    <link href="http://sudharsh.me/blog/2009/04/05/no-gta03-in-2009/"/>
    <updated>2009-04-05T13:56:00+05:30</updated>
    <id>http://sudharsh.me/blog/2009/04/05/no-gta03-in-2009</id>
    <content type="html"><![CDATA[<p>2-3 back came a sad and shocking <a href="http://mobile.slashdot.org/article.pl?sid=09/04/04/228240&amp;art_pos=2">news</a> (atleast to me) that Openmoko has sacked/let go of 50% of its work force and has ceased all developments for GTA03. Furthermore Openmoko has stopped funding FSO. Both of which were grim developments to hear.</p>

<p>On a brighter note, FSO has started work on the Vala/C implemention of the reference Python implementation named <a href="http://git.freesmartphone.org/?p=cornucopia.git;a=summary">cornucopia</a>, which mainly aims at the general defragmentation of all the middleware code out there for handheld devices. Whats more, the first subsystem to be ported to this new codebase will be odeviced, which happened to be my project for the <a href="http://code.google.com/soc/2008/openmoko/appinfo.html?csaid=C4E490026007DA79">Google Summer of Code 2008</a>.</p>

<p>For more, check this recent blog entry by <a href="http://www.vanille-media.de/site/index.php/2009/04/04/back-from-switzerland/">Mickey</a>.</p>

<p>Patches all the way :D&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SHR, fsod and certain other things.]]></title>
    <link href="http://sudharsh.me/blog/2008/11/23/shr-fsod-and-certain-other-things/"/>
    <updated>2008-11-23T06:58:00+05:30</updated>
    <id>http://sudharsh.me/blog/2008/11/23/shr-fsod-and-certain-other-things</id>
    <content type="html"><![CDATA[<p><a href="http://wiki.openmoko.org/wiki/SHR">SHR</a> (Stable Hybrid Release) released images recently and boy, did they do an awesome job at it. By far, SHR and Debian are some of the images that uses the <a href="http://git.freesmartphone.org/">FSO daemons</a> by default. So turns out to be a great testing ground for the FSO APIs. And after a long while, I also got some time to play with my Freerunner. Here is a screenshot of TangoGPS in action.</p>

<p><img class="center <a" src="href="http://sudharsh.files.wordpress.com/2008/11/screenshot-11.png?w=225">http://sudharsh.files.wordpress.com/2008/11/screenshot-11.png?w=225</a>"></p>

<p>Hmm..Someone seems to have mapped Chitlapakkam and East Tambaram a bit for <a href="http://openstreetmap.org/">OSM</a>. Wondering who that is. :)</p>

<p>As for fsod, I could really use some help especially with autotools. I managed to set up a preliminary a python scripting interface so that fsod can load python scripts. But that&rsquo;s as far as I got. Apparently DBus needs a mainloop to be setup for exporting objects on the system bus. And since GObject introspection in python seems to be absent at the moment, I had to create bindings to my code. This process is documented and explained <a href="http://www.ibm.com/developerworks/linux/library/l-wrap/">here</a>. But still, I am at a loss as to how to pass the DBus connection object from the mainloop to the python scripts. If someone knows how to do this, please poke me.</p>

<p>The code could be found <a href="http://git.freesmartphone.org/?p=openmoko-gsoc2008.git;a=summary">here</a>. (src/subsystems/Python especially can use some love)</p>

<p>Update: I made a package out of today&rsquo;s tree. Find it <a href="http://sudharsh.mukt.in/fsod_0.1-r0_armv4t.opk">here</a>.</p>
]]></content>
  </entry>
  
</feed>
